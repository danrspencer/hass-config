blueprint:
  name: Automatic Hue Scenes
  description: |
    Turn on a light to a specific scene when motion is detected. 

    When motion is detected the value of the scene sensor will be used to set the Hue scene in the room.

    e.g. If the scene sensor's value is "movie" and the Hue room is "Living Room" then the scene "scene.living_room_movie" will be applied.
  domain: automation
  input:
    scene_sensor:
      name: Scene Sensor
      description: The sensor used to set the scene in the room. If this changes state and the room is on, the room's scene will be updated.
      selector:
        entity:
          domain: sensor
    hue_group:
      name: Hue Group
      description: The hue group entity that will be controlled by this automation.
      selector:
        entity:
          domain: light
    motion_sensor:
      name: Motion Sensor (Optional)
      description: A motion sensor that triggers the automation when motion is detected.
      default: null
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    no_motion_wait:
      name: Wait Time
      description: Time to leave the light on after the last motion is detected.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
    off_duration:
      name: Off Duration
      description: Time taken for the light to dim to off. A longer duration gives you chance to react if the light starts to turn off when not desired.
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    transition_duration:
      name: Transition Duration
      description: Time taken for the light to transition to a new scene if the scene changes while the light is on.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    illuminance_sensor:
      name: Light Level Sensor (Optional)
      description: Sensor used to check illuminance threshholds
      default: null
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_threshold:
      name: Illuminance Threshold
      description: If the light level is already above this value, don't turn the light on (set to 0 to ignore the light level)
      default: 20000
      selector:
        number:
          min: 0
          max: 20000
          unit_of_measurement: lx
    pre_motion_sensor:
      name: Pre Lighting Motion Sensor (Optional)
      description: A motion sensor that causes the room to be lit dimly before being fully lit by the primary motion sensor.
      default: null
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    pre_motion_wait:
      name: Pre Lighting Wait
      description: How long to leave the light on in the pre-lighting state after the pre-lighting sensor detects motion.
      default: 30
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    pre_motion_illuminance_threshold:
      name: Pre Illuminance Threshold
      description: If the light level is already above this value, don't turn the light on (set to 0 to ignore the light level)
      default: 20
      selector:
        number:
          min: 0
          max: 2000
          unit_of_measurement: lx
    pre_motion_brightness:
      name: Pre Motion Brightness
      description: The brightness level for the pre-lighting state, from 1 (minimum) to 5 (maximum).
      default: 1
      selector:
        number:
          min: 1
          max: 5

# If motion is detected within the delay, we restart the script.
mode: restart
max_exceeded: silent

trigger_variables:
  motion_sensor: !input motion_sensor
  pre_motion_sensor: !input pre_motion_sensor

trigger:
  - id: motion
    platform: template
    value_template: "{{ motion_sensor != None and is_state(motion_sensor,'on') }}"
  - id: pre_motion
    platform: template
    value_template: "{{ pre_motion_sensor != None and is_state(pre_motion_sensor,'on') }}"
  - id: scene
    platform: state
    entity_id: !input scene_sensor
  # - id: light_state
  #   platform: template
  #   value_template: >
  #     {% set light_states = state_attr('light.living_room', 'lights')
  #       | map('replace', ' ', '_')
  #       | map('lower')
  #       | map('replace', '', 'light.', 1)
  #       | map('states')
  #       | list
  #     %}

  #     {% set state_precedence = ["on", "off", "unavailable", "unknown"] %}

  #     {{ state_precedence | select('in', light_states) | first }}

variables:
  hue_group: !input hue_group
  scene_sensor: !input scene_sensor
  motion_sensor: !input motion_sensor
  pre_motion_sensor: !input pre_motion_sensor
  illuminance_sensor: !input illuminance_sensor
  illuminance_threshold: !input illuminance_threshold
  pre_motion_illuminance_threshold: !input pre_motion_illuminance_threshold
  scene_entity: >
    {{ hue_group | replace("light.", "scene.", 1) ~ "_" ~ states(scene_sensor) }}

condition:
  - or:
      # If motion trigger either the light must be on or the room must be dark enough
      - and:
          - condition: trigger
            id: motion
          - or:
              - condition: state
                entity_id: !input hue_group
                state: "on"
              - condition: template
                value_template: >
                  {{ illuminance_sensor == None
                  or illuminance_threshold == 0
                  or states(illuminance_sensor) < illuminance_threshold }}
      # If scene trigger check the light is on
      - and:
          - condition: trigger
            id: scene
          - condition: state
            entity_id: !input hue_group
            state: "on"
      # If pre motion trigger check light is off and the room is dark enough, or pre motion state
      - and:
          - condition: trigger
            id: pre_motion
          - or:
              - and:
                  - condition: state
                    entity_id: !input hue_group
                    state: "off"
                  - condition: template
                    value_template: >
                      {{ illuminance_sensor == None
                      or pre_motion_illuminance_threshold == 0
                      or states(illuminance_sensor) < pre_motion_illuminance_threshold }}
              - condition: state
                entity_id: !input hue_group
                attribute: brightness
                state: !input pre_motion_brightness

action:
  # If the scene changed to one that doesn't exist then we skip everything and
  # just turn off the light
  - if:
      - condition: not
        conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: scene
              - condition: template
                value_template: "{{ states(scene_entity) == 'unknown' }}"
    then:
      # Set the scene corretly based on the trigger entity
      - choose:
          # If it was a scene trigger we want to transition slowly
          - conditions:
              - condition: trigger
                id: scene
            sequence:
              - service: hue.activate_scene
                data:
                  transition: 5
                target:
                  entity_id: "{{ scene_entity }}"

          # Otherwise check the light is off before setting the scene
          - conditions:
              condition: or
              conditions:
                - condition: state
                  entity_id: !input hue_group
                  state: "off"
                - condition: template
                  value_template: "{{ in_pre_motion_state }}"
            sequence:
              if:
                - condition: trigger
                  id: pre_motion
              then:
                - service: hue.activate_scene
                  data:
                    brightness: !input pre_motion_brightness
                  target:
                    entity_id: "{{ scene_entity }}"
              else:
                - service: hue.activate_scene
                  target:
                    entity_id: "{{ scene_entity }}"

      # If we triggered from motion, wait for it to stop
      - if:
          - condition: trigger
            id: motion
        then:
          - wait_for_trigger:
              - platform: template
                value_template: "{{ is_state(motion_sensor,'off') }}"

      # If we triggered from pre_motion, wait for it to stop
      - if:
          - condition: trigger
            id: pre_motion
        then:
          - wait_for_trigger:
              - platform: template
                value_template: "{{ is_state(pre_motion_sensor,'off') }}"

      # If we're in a pre-motion state then wait for pre-motion delay
      - if:
          - condition: and
            conditions:
              - condition: trigger
                id: pre_motion
              - condition: template
                value_template: "{{ in_pre_motion_state }}"
        then:
          - delay:
              hours: 0
              minutes: 0
              seconds: !input pre_motion_wait
              milliseconds: 0
        else:
          # Otherwise wait for the default delay
          - delay:
              hours: 0
              minutes: !input no_motion_wait
              seconds: 0
              milliseconds: 0

  # Turn the light off slowly
  - service: light.turn_off
    target:
      entity_id: !input hue_group
    data:
      transition: !input off_duration
