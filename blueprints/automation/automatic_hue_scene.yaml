blueprint:
  name: Automatic Hue Scenes
  description: |
    Turn on a light to a specific scene when motion is detected. 

    When motion is detected the value of the scene sensor will be used to set the Hue scene in the room.

    e.g. If the scene sensor's value is "movie" and the Hue room is "Living Room" then the scene "scene.living_room_movie" will be applied.

    Trouble shooting: Ensure that your Hue entity names are lined up correctly. If your entity name for your hue group is "light.living_room" but your scenes are "scene.lightroom_scene" then this automation will not work. By default the names should line up but if you have renamed entities in the hue app they can become out of sync.
  domain: automation
  input:
    scene_sensor:
      name: Scene Sensor
      description: The sensor used to set the scene in the room. If this changes state and the room is on, the room's scene will be updated.
      selector:
        entity:
          domain: sensor
    hue_group:
      name: Hue Group
      description: The hue group entity that will be controlled by this automation.
      selector:
        entity:
          domain: light
    motion_sensor:
      name: Motion Sensor (Optional)
      description: A motion sensor that triggers the automation when motion is detected. If no motion sensor is selected then the automation will instead activate when the lights are turned on manually.
      default: null
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    no_motion_wait:
      name: Wait Time
      description: Time to leave the light on after the last motion is detected. If no motion sensor is selected the lights will not turn off automatically.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
    off_duration:
      name: Off Duration
      description: Time taken for the light to dim to off. A longer duration gives you chance to react if the light starts to turn off when not desired.
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    transition_duration:
      name: Transition Duration
      description: Time taken for the light to transition to a new scene if the scene changes while the light is on.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    illuminance_sensor:
      name: Light Level Sensor (Optional)
      description: Sensor used to check illuminance threshholds
      default: null
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_threshold:
      name: Illuminance Threshold
      description: If the light level is already above this value, don't turn the light on (set to 0 to ignore the light level)
      default: 20000
      selector:
        number:
          min: 0
          max: 20000
          unit_of_measurement: lx
    pre_motion_sensor:
      name: Pre Lighting Motion Sensor (Optional)
      description: A motion sensor that causes the room to be lit dimly before being fully lit by the primary motion sensor.
      default: null
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    pre_motion_wait:
      name: Pre Lighting Wait
      description: How long to leave the light on in the pre-lighting state after the pre-lighting sensor detects motion.
      default: 30
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    pre_motion_illuminance_threshold:
      name: Pre Illuminance Threshold
      description: If the light level is already above this value, don't turn the light on (set to 0 to ignore the light level)
      default: 20
      selector:
        number:
          min: 0
          max: 2000
          unit_of_measurement: lx
    pre_motion_brightness:
      name: Pre Motion Brightness
      description: The brightness level for the pre-lighting state, from 1 (minimum) to 5 (maximum).
      default: 1
      selector:
        number:
          min: 1
          max: 5

# If motion is detected within the delay, we restart the script.
mode: restart
max_exceeded: silent

trigger_variables:
  hue_group: !input hue_group
  motion_sensor: !input motion_sensor
  pre_motion_sensor: !input pre_motion_sensor
  light_recently_on: >
    {% set current_time = as_timestamp(now()) %}
    {% set recently = current_time - 60 %}

    {% set light_entity_ids = state_attr(hue_group, 'lights')Â 
      | map('replace', ' ', '_')
      | map('lower')
      | map('replace', '', 'light.', 1)
    %}

    {% set lights = namespace(recently_changed=[]) %}

    {% for light_id in light_entity_ids %}
      {% set last_changed = as_timestamp(states[light_id].last_changed) %}
      {% if recently_changed < last_changed %}
        {% set lights.recently_changed = lights.recently_changed + [light_id] %}
      {% endif %}
    {% endfor %}

    {% set light_recently_on = lights.recently_changed
      | map('states')
      | select('eq', 'on')
      | list
      | length > 0
    %}

trigger:
  - id: motion
    platform: template
    value_template: "{{ motion_sensor != None and is_state(motion_sensor,'on') }}"
  - id: motion_off
    platform: template
    value_template: "{{ motion_sensor != None and is_state(motion_sensor,'off') }}"
    for:
      minutes: !input no_motion_wait
  - id: pre_motion
    platform: template
    value_template: "{{ pre_motion_sensor != None and is_state(pre_motion_sensor,'on') }}"
  - id: pre_motion_off
    platform: template
    value_template: "{{ pre_motion_sensor != None and is_state(pre_motion_sensor,'on') }}"
    for:
      seconds: !input no_motion_wait
  - id: scene
    platform: state
    entity_id: !input scene_sensor
  # Triggers when the lights are turned on manually
  - id: manual
    platform: template
    value_template: "{{ light_recently_on }}"

variables:
  hue_group: !input hue_group
  scene_sensor: !input scene_sensor

  illuminance_sensor: !input illuminance_sensor
  illuminance_threshold: !input illuminance_threshold

  pre_motion_sensor: !input pre_motion_sensor
  pre_motion_brightness: !input pre_motion_brightness
  pre_motion_illuminance_threshold: !input pre_motion_illuminance_threshold

  scene_entity: >
    {{ hue_group | replace("light.", "scene.", 1) ~ "_" ~ states(scene_sensor) }}

  known_scene: >
    {{ states(scene_entity) != "unknown" }}

  above_illuminance_threshold: >
    {{ illuminance_sensor != None 
    and illuminance_threshold != 0
    and states(illuminance_sensor) | int > illuminance_threshold }}

  above_pre_motion_illuminance_threshold: >
    {{ illuminance_sensor != None 
    and illuminance_threshold != 0
    and states(illuminance_sensor) | int > illuminance_threshold }}

  above_pre_motion_brightness: >
    {{ state_attr(hue_group, "brightness") | default(0, true) > pre_motion_brightness }}

  light_on: >
    {{ states(hue_group) == "on" or above_pre_motion_brightness }}

condition:
  # Putting these all inside an "and" to clean up the trace
  - and:
      # Block if the trigger was manual and the previous state wasn't unavailable
      - not:
          - and:
              - id: manual
                condition: trigger
              - "{{ trigger.from_state.state != 'unavailable' }}"

      # Block if the trigger was motion and the lights are already on or above illuminance threshold
      - not:
          - and:
              - id: motion
                condition: trigger
              - or:
                  - "{{ lights_on }}"
                  - "{{ above_illuminance_threshold }}"
      # Block if the trigger was pre_motion and the lights are already on, above illuminance threshold or above pre_motion brightness
      - not:
          - and:
              - id: pre_motion
                condition: trigger
              - or:
                  - "{{ lights_on }}"
                  - "{{ above_pre_motion_brightness }}"
                  - "{{ above_pre_motion_illuminance_threshold }}"
      # Block if the trigger was pre_motion_off and we're above the pre_motion_brightness (e.g. the pre_motion_sensor is no longer in control)
      - not:
          - and:
              - id: pre_motion_off
                condition: trigger
              - "{{ above_pre_motion_brightness }}"

action:
  - choose:
      # Motion Trigger
      - conditions:
          - id: motion
            condition: trigger
          - "{{ known_scene }}"
        sequence:
          - service: hue.activate_scene
            target:
              entity_id: "{{ scene_entity }}"
      # Pre Motion Trigger
      - conditions:
          - id: pre_motion
            condition: trigger
          - "{{ known_scene }}"
        sequence:
          - service: hue.activate_scene
            data:
              brightness: !input pre_motion_brightness
            target:
              entity_id: "{{ scene_entity }}"
      # Scene
      - conditions:
          - id: scene
            condition: trigger
          - "{{ known_scene }}"
        sequence:
          - if:
              - "{{ above_pre_motion_brightness }}"
            then:
              - service: hue.activate_scene
                data:
                  transition: !input transition_duration
                target:
                  entity_id: "{{ scene_entity }}"
            else:
              - service: hue.activate_scene
                data:
                  brightness: !input pre_motion_brightness
                  transition: !input transition_duration
                target:
                  entity_id: "{{ scene_entity }}"
      # Turn Off
      - conditions:
          - or:
              - id: motion_off
                condition: trigger
              - id: pre_motion_off
                condition: trigger
              - "{{ not known_scene }}"
        sequence:
          service: light.turn_off
          target:
            entity_id: !input hue_group
          data:
            transition: !input off_duration
    # Default behavior; for example when the light is turned on manually or the automation is manually triggered
    default:
      - service: hue.activate_scene
        target:
          entity_id: "{{ scene_entity }}"
